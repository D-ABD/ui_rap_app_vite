// src/hooks/usePagination.ts
import { useState, useMemo } from 'react';

/**
 * ðŸ“š usePagination (avancÃ©)
 *
 * Hook personnalisÃ© pour gÃ©rer la pagination dans une liste.
 *
 * Il permet :
 * - de suivre la page actuelle (`page`)
 * - de dÃ©finir le nombre total dâ€™Ã©lÃ©ments (`count`)
 * - de dÃ©finir dynamiquement la taille de page (`pageSize`)
 * - de connaÃ®tre si une page prÃ©cÃ©dente / suivante existe
 *
 * Fournit :
 * - `page` : page actuelle
 * - `setPage` : setter pour changer la page
 * - `count` : nombre total dâ€™Ã©lÃ©ments
 * - `setCount` : setter pour dÃ©finir le total dâ€™Ã©lÃ©ments
 * - `pageSize` : nombre dâ€™Ã©lÃ©ments par page
 * - `setPageSize` : setter pour changer la taille de page dynamiquement
 * - `totalPages` : nombre total de pages (calculÃ© automatiquement)
 * - `hasNext` : `true` si une page suivante est disponible
 * - `hasPrev` : `true` si une page prÃ©cÃ©dente est disponible
 *
 * @param initialPage - Page de dÃ©part (par dÃ©faut : 1)
 * @param initialPageSize - Taille de page par dÃ©faut (par dÃ©faut : 10)
 * @param externalCount - (optionnel) Count externe (ex : data.count depuis useFetch)
 *
 * @returns Un objet avec les propriÃ©tÃ©s utiles pour la pagination
 */
export default function usePagination(
  initialPage = 1,
  initialPageSize = 10,
  externalCount?: number
) {
  const [internalCount, setCount] = useState(0);
  const [page, setPage] = useState(initialPage);
  const [pageSize, setPageSize] = useState(initialPageSize);

  const effectiveCount = externalCount !== undefined ? externalCount : internalCount;

  const totalPages = useMemo(() => Math.ceil(effectiveCount / pageSize), [effectiveCount, pageSize]);
  const hasNext = page < totalPages;
  const hasPrev = page > 1;

  return {
    page,
    setPage,
    count: effectiveCount,
    setCount, // ðŸ‘ˆ toujours disponible pour cas manuels
    pageSize,
    setPageSize,
    totalPages,
    hasNext,
    hasPrev,
  };
}
